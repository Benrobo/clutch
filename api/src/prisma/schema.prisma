datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
    extensions        = [pgvector(map: "vector")]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

enum VideoOrientation {
    VERTICAL // 9:16 for TikTok-style
    HORIZONTAL // 16:9 original MLB
    SQUARE // 1:1 if needed
}

model users {
    id               String  @id @default(cuid())
    name             String
    email            String  @unique
    avatar           String
    google_ref_token String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    preferences      Json? // { teams: number[], players: number[] }
    saved_highlights saved_highlights[]

    @@index([email])
}

model teams {
    id           Int    @id
    name         String
    abbreviation String
    league       Json // check db-fields-structure.md

    logo_url   String?
    created_at DateTime @default(now())

    // player_refs      player_team_refs[] @relation("team_to_player_ref")
    home_games games[] @relation("home_team")
    away_games games[] @relation("away_team")
    // player_team_refs player_team_refs[]
}

// No need for a separate model for players
// GCMLB API would be used in replacement

// model players {
//     id          Int     @id
//     fullname    String
//     age         Int
//     height      String
//     gender      String
//     verified    Boolean
//     profile_pic String?

//     // Relation to team references
//     team_refs player_team_refs[]

//     @@unique([fullname]) // Ensure player names are unique
// }

// model player_team_refs {
//     id         String   @id @default(cuid())
//     player_id  Int
//     team_id    Int
//     position   String // Position can change between teams
//     stats      Json? // Team-specific stats
//     created_at DateTime @default(now())

//     // Relations
//     player  players @relation(fields: [player_id], references: [id], onDelete: Cascade)
//     team    teams   @relation("team_to_player_ref", fields: [team_id], references: [id], onDelete: Cascade)
//     teams   teams?  @relation(fields: [teamsId], references: [id])
//     teamsId Int?

//     @@unique([player_id, team_id]) // A player can only have one active reference per team
//     @@index([player_id])
//     @@index([team_id])
//     @@index([teamsId])
// }

model games {
    id           Int    @id
    date         String
    home_team_id Int
    away_team_id Int
    status       String
    season       Int
    game_type    String

    decisions Json // check db-fields-structure.md

    home_team  teams        @relation("home_team", fields: [home_team_id], references: [id], onDelete: Cascade)
    away_team  teams        @relation("away_team", fields: [away_team_id], references: [id], onDelete: Cascade)
    highlights highlights[]

    @@index([date])
    @@index([home_team_id])
    @@index([away_team_id])
}

model highlights {
    id      String @id @default(cuid())
    game_id Int

    created_at DateTime @default(now())

    saved_by   saved_highlights[]
    game       games                  @relation(fields: [game_id], references: [id], onDelete: Cascade)
    content    highlights_content?
    highlights highlights_playbacks[] // max 5 videos

    @@index([game_id])
}

model highlights_playbacks {
    id           String @id @default(cuid())
    highlight_id String

    title       String // check db-fields-structure.md
    description String // check db-fields-structure.md

    metadata Json?

    mlb_video_url            String // Original MLB video
    mlb_video_duration       String
    processed_video_url      String? // Our processed/generated video
    processed_video_duration String?
    orientation              VideoOrientation @default(HORIZONTAL)

    // transcript
    transcript            Json?
    translated_transcript Json?
    subtitles             String?

    summary Json?

    processed Boolean?

    highlight highlights @relation(fields: [highlight_id], references: [id], onDelete: Cascade)

    @@index([highlight_id])
}

model highlights_content {
    id           String @id @default(cuid())
    highlight_id String @unique

    // recap
    title    String
    headline String
    keywords String[]
    body     String // markdown
    photos   String[] //max 5

    highlight highlights @relation(fields: [highlight_id], references: [id], onDelete: Cascade)

    @@index([highlight_id])
}

model saved_highlights {
    id           String     @id @default(cuid())
    user_id      String
    highlight_id String
    user         users      @relation(fields: [user_id], references: [id])
    highlight    highlights @relation(fields: [highlight_id], references: [id], onDelete: Cascade)

    @@unique([user_id, highlight_id])
    @@index([user_id])
    @@index([highlight_id])
}

enum JobType {
    VIDEO_PROCESSING
    HIGHLIGHT_GENERATION
    STATS_ANALYSIS
}

enum JobStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    CANCELLED
}

model jobs {
    id     String    @id @default(cuid())
    type   JobType
    status JobStatus @default(PENDING)

    input_data  Json? // Generic input data for the job
    output_data Json? // Generic output/results
    error       String?

    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt
    started_at   DateTime?
    completed_at DateTime?

    @@index([type])
    @@index([status])
    @@index([created_at])
}
